/**
 * Runtime: 2 ms, faster than 77.54% of Java online submissions for Add Two Numbers.
 * Memory Usage: 44.5 MB, less than 86.83% of Java online submissions for Add Two Numbers.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */

class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode returnNode = null;
        //get the first digit
        int tempSum = l1.val + l2.val;
        int sum = tempSum % 10;//get the sum of the first digit
        int carry = tempSum / 10;//get the carry for the next digit
        returnNode = new ListNode(sum);
        ListNode temp = returnNode;
        l1 = l1.next;
        l2 = l2.next;
        //go on calculating the other digits
        while(l1 != null && l2 != null){
            tempSum = l1.val + l2.val + carry;
            sum = tempSum % 10;//get the sum of the current digit
            carry = tempSum / 10;//get the carry for the next digit
            temp.next = new ListNode(sum);
            temp = temp.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        //get the rest digits
        if(l1 != null){
            do{
                tempSum = l1.val + carry;
                sum = tempSum % 10;
                carry = tempSum / 10;
                temp.next = new ListNode(sum);
                temp = temp.next;
                l1 = l1.next;
            }while(l1 != null);
        }else if(l2 != null){
            do{
                tempSum = l2.val + carry;
                sum = tempSum % 10;
                carry = tempSum / 10;
                temp.next = new ListNode(sum);
                temp = temp.next;
                l2 = l2.next;
            }while(l2 != null);
        }
        if(carry != 0){
            temp.next = new ListNode(carry);
        }
        return returnNode;
    }
}
